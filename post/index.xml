<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jordan Farrer</title>
    <link>/post/</link>
    <description>Recent content in Posts on Jordan Farrer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Jordan Farrer</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GroupMe Data ETL</title>
      <link>/post/groupme-data-etl/</link>
      <pubDate>Fri, 26 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/groupme-data-etl/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tldr&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; tl;dr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-extraction&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Data Extraction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-transforming&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Data Transforming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#loading-into-aws-redshift&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Loading into AWS Redshift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;style&gt;
  .article-style img {
    box-shadow: none !important;
  }
   img { 
      border:0px;
      
   }
  .pagedtable-info {
    font-size: 75% !important;
  }
  table {
    font-size: 75% !important;
  }
&lt;/style&gt;
&lt;div id=&#34;tldr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; tl;dr&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Extract,_transform,_load&#34;&gt;ETL&lt;/a&gt; (extract, transform, load) process for the Wharton 2018/2019 GroupMe class threads from the GroupMe API to Amazon Redshift&lt;/li&gt;
&lt;li&gt;I used this dataset for a &lt;a href=&#34;https://jrfarrer.github.io/mktg776_p1/&#34;&gt;project&lt;/a&gt; in Peter Fader’s course and to teach SQL to MBAs (session &lt;a href=&#34;http://bit.ly/sqlatlunch_week1&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;http://bit.ly/sqlatlunch_week2&#34;&gt;2&lt;/a&gt;, and &lt;a href=&#34;http://bit.ly/sqlatlunch_week3&#34;&gt;3&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;data-extraction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Data Extraction&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://groupme.com&#34;&gt;GroupMe&lt;/a&gt; has a &lt;a href=&#34;https://dev.groupme.com/docs/v3&#34;&gt;REST API&lt;/a&gt; and after logging in you can create your own &lt;a href=&#34;https://dev.groupme.com/session/new&#34;&gt;API key&lt;/a&gt;. We have two separate keys for the 2018 and 2019 class threads that are stored in &lt;code&gt;.Renviron&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;base_url &amp;lt;- &amp;quot;https://api.groupme.com/v3/&amp;quot;
tokens &amp;lt;- paste0(&amp;quot;?token=&amp;quot;, Sys.getenv(c(&amp;quot;GROUPME_2018&amp;quot;, &amp;quot;GROUPME_2019&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;groups&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Groups&lt;/h2&gt;
&lt;p&gt;In order to use the messages API, we need to know the &lt;code&gt;group_id&lt;/code&gt;. We create a function that for an API token returns all the groups the users belong to. The GroupMe API only allows returning 10 results per request so we loop until there are no more groups to return.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fn_dl_groups &amp;lt;- function(token) {
  
  i &amp;lt;- 1; more_response &amp;lt;- TRUE; tmp_list &amp;lt;- list();
  while (more_response) {
      url &amp;lt;- paste0(base_url, &amp;quot;groups&amp;quot;, token, &amp;quot;&amp;amp;per_page=10&amp;amp;page=&amp;quot;, i)
      tmp_group &amp;lt;- fromJSON(url, flatten = TRUE)$response
      if (length(tmp_group) == 0) {
        more_response &amp;lt;- FALSE
      } else {
        tmp_list[[i]] &amp;lt;- tmp_group 
        i &amp;lt;- i + 1
      }
  }
  tmp_list %&amp;gt;% 
    rbind_pages() %&amp;gt;% 
    as_tibble()
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We apply this function using a &lt;code&gt;purrr&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_groups &amp;lt;-
  map_dfr(tokens, fn_dl_groups)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each record of the data frame is a group (with a &lt;code&gt;group_id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_groups %&amp;gt;% glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 178
## Variables: 28
## $ id                                          &amp;lt;chr&amp;gt; &amp;quot;25466934&amp;quot;, &amp;quot;19105...
## $ group_id                                    &amp;lt;chr&amp;gt; &amp;quot;25466934&amp;quot;, &amp;quot;19105...
## $ name                                        &amp;lt;chr&amp;gt; &amp;quot;Wharton Ski Trip ...
## $ phone_number                                &amp;lt;chr&amp;gt; &amp;quot;+1 6177016748&amp;quot;, &amp;quot;...
## $ type                                        &amp;lt;chr&amp;gt; &amp;quot;private&amp;quot;, &amp;quot;privat...
## $ description                                 &amp;lt;chr&amp;gt; &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;Breck FAQ...
## $ image_url                                   &amp;lt;chr&amp;gt; &amp;quot;https://i.groupme...
## $ creator_user_id                             &amp;lt;chr&amp;gt; &amp;quot;34509622&amp;quot;, &amp;quot;34473...
## $ created_at                                  &amp;lt;int&amp;gt; 1475104416, 145321...
## $ updated_at                                  &amp;lt;int&amp;gt; 1516944776, 151693...
## $ office_mode                                 &amp;lt;lgl&amp;gt; FALSE, FALSE, FALS...
## $ share_url                                   &amp;lt;chr&amp;gt; &amp;quot;https://groupme.c...
## $ share_qr_code_url                           &amp;lt;chr&amp;gt; &amp;quot;https://image.gro...
## $ members                                     &amp;lt;list&amp;gt; [&amp;lt;c(&amp;quot;34509622&amp;quot;, &amp;quot;...
## $ max_members                                 &amp;lt;int&amp;gt; 1400, 1000, 2000, ...
## $ messages.count                              &amp;lt;int&amp;gt; 1351, 13191, 701, ...
## $ messages.last_message_id                    &amp;lt;chr&amp;gt; &amp;quot;15169447768279128...
## $ messages.last_message_created_at            &amp;lt;int&amp;gt; 1516944776, 151693...
## $ messages.preview.nickname                   &amp;lt;chr&amp;gt; &amp;quot;Tala Al Jabri&amp;quot;, &amp;quot;...
## $ messages.preview.text                       &amp;lt;chr&amp;gt; &amp;quot;Is there a Wharto...
## $ messages.preview.image_url                  &amp;lt;chr&amp;gt; &amp;quot;https://i.groupme...
## $ messages.preview.attachments                &amp;lt;list&amp;gt; [&amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;&amp;gt;, ...
## $ messages.preview.event.type                 &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA...
## $ messages.preview.event.data.conversation.id &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA...
## $ messages.preview.event.data.poll.id         &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA...
## $ messages.preview.event.data.poll.subject    &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA...
## $ messages.preview.event.data.user.id         &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA...
## $ messages.preview.event.data.user.nickname   &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;messages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Messages&lt;/h2&gt;
&lt;p&gt;Now we create a function to download the message for any given &lt;code&gt;group_id&lt;/code&gt;. Again, this involves a loop as there is a limit of 100 messages per request.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fn_dl_messages &amp;lt;- function(group_id, token) {
  
  i &amp;lt;- 1; more_response &amp;lt;- TRUE; tmp_list &amp;lt;- list();last_id &amp;lt;- &amp;quot;&amp;quot;;
  while(more_response) {
    before_id_param &amp;lt;- ifelse(last_id == &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, paste0(&amp;quot;&amp;amp;before_id=&amp;quot;, last_id))
    url &amp;lt;- paste0(base_url, &amp;quot;groups/&amp;quot;, group_id, 
                  &amp;quot;/messages&amp;quot;, token, &amp;quot;&amp;amp;limit=100&amp;quot;, before_id_param)  
    tmp_msg &amp;lt;- try(
      fromJSON(url, flatten = TRUE)$response$messages
      , silent = TRUE
    )
    if (&amp;quot;try-error&amp;quot; %in% class(tmp_msg)) {
      more_response &amp;lt;- FALSE
    } else {
      tmp_list[[i]] &amp;lt;- tmp_msg 
      last_id &amp;lt;- tail(tmp_msg, 1)$id  
      i &amp;lt;- i + 1
    }
  }
  tmp_list %&amp;gt;% 
    rbind_pages() %&amp;gt;% 
    as_tibble()
}  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We apply this function to only the two class threads named &lt;strong&gt;Wharton - 2018&lt;/strong&gt; and &lt;strong&gt;Wharton MBA Class of 2019&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_messages &amp;lt;-
  all_groups %&amp;gt;%
  filter(name %in% c(&amp;quot;Wharton - 2018&amp;quot;, &amp;quot;Wharton MBA Class of 2019&amp;quot;)) %&amp;gt;% 
  pull(group_id) %&amp;gt;%
  map2_dfr(tokens, fn_dl_messages) %&amp;gt;%
  mutate(thread = 
           case_when(
              group_id == &amp;quot;19105351&amp;quot; ~ &amp;quot;2018&amp;quot;
            , group_id == &amp;quot;27514952&amp;quot; ~ &amp;quot;2019&amp;quot;
          )
        )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;all_messages&lt;/code&gt; data frame contains columns with nested data frames and vectors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_messages %&amp;gt;% glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 22,897
## Variables: 37
## $ attachments                      &amp;lt;list&amp;gt; [&amp;lt;&amp;gt;, &amp;lt;&amp;gt;, &amp;lt;12, 19, 31, 6, 11,...
## $ avatar_url                       &amp;lt;chr&amp;gt; &amp;quot;https://i.groupme.com/740x75...
## $ created_at                       &amp;lt;int&amp;gt; 1516937026, 1516936990, 15169...
## $ favorited_by                     &amp;lt;list&amp;gt; [&amp;quot;32530123&amp;quot;, &amp;lt;&amp;gt;, &amp;lt;&amp;quot;22614230&amp;quot;...
## $ group_id                         &amp;lt;chr&amp;gt; &amp;quot;19105351&amp;quot;, &amp;quot;19105351&amp;quot;, &amp;quot;1910...
## $ id                               &amp;lt;chr&amp;gt; &amp;quot;151693702666740099&amp;quot;, &amp;quot;151693...
## $ name                             &amp;lt;chr&amp;gt; &amp;quot;Pablo Staubli&amp;quot;, &amp;quot;Jennifer Ma...
## $ sender_id                        &amp;lt;chr&amp;gt; &amp;quot;40483399&amp;quot;, &amp;quot;32530123&amp;quot;, &amp;quot;6127...
## $ sender_type                      &amp;lt;chr&amp;gt; &amp;quot;user&amp;quot;, &amp;quot;user&amp;quot;, &amp;quot;user&amp;quot;, &amp;quot;user...
## $ source_guid                      &amp;lt;chr&amp;gt; &amp;quot;9199ABBB-485B-44BE-B7D5-54AC...
## $ system                           &amp;lt;lgl&amp;gt; FALSE, FALSE, FALSE, FALSE, F...
## $ text                             &amp;lt;chr&amp;gt; &amp;quot;☝🏼&amp;quot;, &amp;quot;Hi all - Is anyone goi...
## $ user_id                          &amp;lt;chr&amp;gt; &amp;quot;40483399&amp;quot;, &amp;quot;32530123&amp;quot;, &amp;quot;6127...
## $ event.type                       &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.user.id               &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.user.nickname         &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.added_users           &amp;lt;list&amp;gt; [NULL, NULL, NULL, NULL, NUL...
## $ event.data.options               &amp;lt;list&amp;gt; [NULL, NULL, NULL, NULL, NUL...
## $ event.data.adder_user.id         &amp;lt;int&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.adder_user.nickname   &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.remover_user.id       &amp;lt;int&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.remover_user.nickname &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.removed_user.id       &amp;lt;int&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.removed_user.nickname &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.conversation.id       &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.poll.id               &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.poll.subject          &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.poll.expiration       &amp;lt;int&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.url                   &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.event.id              &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.event.name            &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.event_name            &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.minutes               &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.updated_fields        &amp;lt;list&amp;gt; [NULL, NULL, NULL, NULL, NUL...
## $ event.data.name                  &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ event.data.topic                 &amp;lt;chr&amp;gt; NA, NA, NA, NA, NA, NA, NA, N...
## $ thread                           &amp;lt;chr&amp;gt; &amp;quot;2018&amp;quot;, &amp;quot;2018&amp;quot;, &amp;quot;2018&amp;quot;, &amp;quot;2018...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-transforming&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Data Transforming&lt;/h1&gt;
&lt;p&gt;We will convert each of the nested lists (that came from the jsons returned by the API calls) into relational tables that hold the following information:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;li&gt;Messages&lt;/li&gt;
&lt;li&gt;Likes&lt;/li&gt;
&lt;li&gt;Media (pics, videos, gifs)&lt;/li&gt;
&lt;li&gt;Mentions&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;users&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Users&lt;/h2&gt;
&lt;p&gt;One the questions my MKTG776 Project 1 sought to answer was &lt;a href=&#34;https://jrfarrer.github.io/mktg776_p1/#43_gender_differences&#34;&gt;do men and women use GroupMe differently&lt;/a&gt;? Using the NBD model discussed in the course, I showed that in terms of messaging, mentions, and likes the answer was &lt;strong&gt;no&lt;/strong&gt;. So, for Wharton 2018, we use the &lt;code&gt;googlesheets&lt;/code&gt; package to pull external data from a Google Sheet.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gs_auth(token = &amp;quot;/home/rstudio/googlesheets_token.rds&amp;quot;, verbose = FALSE)

users_gender &amp;lt;- gs_title(&amp;quot;groupme_users&amp;quot;) %&amp;gt;%  gs_read(ws = &amp;quot;users&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each line of the &lt;code&gt;all_groups&lt;/code&gt; data frame contains a nested data frame with members of each group. We unnest this user table and join it with the gender information from the Google spreadsheet.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;users &amp;lt;- 
  all_groups %&amp;gt;% 
  filter(name %in% c(&amp;quot;Wharton - 2018&amp;quot;, &amp;quot;Wharton MBA Class of 2019&amp;quot;)) %&amp;gt;%
  select(group_id, members) %&amp;gt;% 
  mutate(thread = 
         case_when(
            group_id == &amp;quot;19105351&amp;quot; ~ &amp;quot;2018&amp;quot;
          , group_id == &amp;quot;27514952&amp;quot; ~ &amp;quot;2019&amp;quot;
        )
      ) %&amp;gt;%
  unnest() %&amp;gt;%
  left_join(
    users_gender %&amp;gt;%
      select(user_id, gender) %&amp;gt;%
      mutate(
        user_id = as.character(user_id)
        , gender = factor(gender, levels = c(&amp;quot;Female&amp;quot;,&amp;quot;Male&amp;quot;))
      )
    , by = &amp;#39;user_id&amp;#39;
  ) %&amp;gt;%
  select(thread, user_id, nickname, image_url, id, muted, gender) %&amp;gt;%
  arrange(user_id)

users %&amp;gt;% glimpse()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 1,815
## Variables: 7
## $ thread    &amp;lt;chr&amp;gt; &amp;quot;2018&amp;quot;, &amp;quot;2019&amp;quot;, &amp;quot;2018&amp;quot;, &amp;quot;2019&amp;quot;, &amp;quot;2018&amp;quot;, &amp;quot;2019&amp;quot;, &amp;quot;201...
## $ user_id   &amp;lt;chr&amp;gt; &amp;quot;10006049&amp;quot;, &amp;quot;10035936&amp;quot;, &amp;quot;100773&amp;quot;, &amp;quot;10140688&amp;quot;, &amp;quot;10161...
## $ nickname  &amp;lt;chr&amp;gt; &amp;quot;Jared Horvitz&amp;quot;, &amp;quot;Carl Chan&amp;quot;, &amp;quot;Alula Selassie&amp;quot;, &amp;quot;Pat...
## $ image_url &amp;lt;chr&amp;gt; &amp;quot;https://i.groupme.com/748x748.jpeg.c88a057e4b5b4c94...
## $ id        &amp;lt;chr&amp;gt; &amp;quot;146603512&amp;quot;, &amp;quot;207892698&amp;quot;, &amp;quot;172611969&amp;quot;, &amp;quot;238457662&amp;quot;, ...
## $ muted     &amp;lt;lgl&amp;gt; FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, FALSE,...
## $ gender    &amp;lt;fctr&amp;gt; Male, NA, Male, NA, Male, NA, Female, NA, NA, Male,...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have created a users table with 7 columns. Below is a preview of 10 rows and 3 columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;users %&amp;gt;%
  select(thread, user_id, nickname, muted) %&amp;gt;%
  head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:print-users-table-table&#34;&gt;Table 3.1: &lt;/span&gt;Sample rows from the user table&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;thread&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;user_id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;nickname&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;muted&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10006049&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jared Horvitz&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2019&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10035936&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Carl Chan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;100773&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alula Selassie&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2019&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10140688&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Patricio Brito&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10161622&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Anderson 辛安&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2019&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10203143&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Shruti Shah&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10217059&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Kirtika Challa&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2019&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10269672&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nikhil Raghuveera&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2019&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10297047&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alex Daniels&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10467730&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;RJ Martin&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;messages-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; Messages&lt;/h2&gt;
&lt;p&gt;GroupMe records each event (e.g. message post, a user entering the group, creating an event, changing nickname within the group), so we isolate only the messages sent my users and create a &lt;a href=&#34;https://en.wikipedia.org/wiki/Fact_table&#34;&gt;fact table&lt;/a&gt; which is keyed on &lt;code&gt;msg_id&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msgs_cleaned &amp;lt;-
  all_messages %&amp;gt;%
  filter(system == FALSE &amp;amp; is.na(event.type)) %&amp;gt;%
  select(thread, id, created_at, user_id, name, text) %&amp;gt;%
  rename(msg_id = id) %&amp;gt;%
  mutate(created_at = lubridate::as_datetime(created_at, tz = &amp;quot;America/New_York&amp;quot;)) %&amp;gt;%
  select(thread, msg_id, created_at, user_id, name, text)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will add some more derived columns to the messages table in a moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;likes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3&lt;/span&gt; Likes&lt;/h2&gt;
&lt;p&gt;Each message can have many likes so it’s best to store this information as a separate table. In likes table, each row represents a person and &lt;code&gt;liked_by&lt;/code&gt; is a &lt;code&gt;user_id&lt;/code&gt; - person who liked that &lt;code&gt;msg_id&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msg_likes &amp;lt;-
  all_messages %&amp;gt;% 
  filter(system == FALSE &amp;amp; is.na(event.type)) %&amp;gt;%
  rowwise() %&amp;gt;%
  filter(class(favorited_by) != &amp;quot;list&amp;quot;) %&amp;gt;%
  ungroup() %&amp;gt;%
  select(thread, id, favorited_by) %&amp;gt;% 
  unnest() %&amp;gt;%
  rename(
      msg_id = id
    , liked_by = favorited_by
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msg_likes %&amp;gt;%
  head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:print-likes-table-table&#34;&gt;Table 3.2: &lt;/span&gt;Sample rows from the message likes table&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;thread&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;msg_id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;liked_by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693702666740099&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;32530123&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693691456624897&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;22614230&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693691456624897&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;25728066&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693691456624897&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;40286396&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693691456624897&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5264490&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693691456624897&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5339851&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693688143682856&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;22614230&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693688143682856&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;3756827&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693688143682856&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;40286396&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693407843354645&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;19796318&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;media-pics-videos-gifs&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.4&lt;/span&gt; Media (pics, videos, gifs)&lt;/h2&gt;
&lt;p&gt;The media (images, videos, and gifs) sent in a message is buried in another part of the json file. We unnest the the media and store individual links in a separate table. Surprisingly, all of these links are public (not behind a password).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msg_media &amp;lt;-
  all_messages %&amp;gt;%
  filter(system == FALSE &amp;amp; is.na(event.type)) %&amp;gt;%
  rowwise() %&amp;gt;%
  filter(class(attachments) != &amp;quot;list&amp;quot;) %&amp;gt;%
  ungroup() %&amp;gt;%
  select(thread, id, attachments) %&amp;gt;%
  unnest() %&amp;gt;%
  filter(type %in% c(&amp;quot;linked_image&amp;quot;, &amp;quot;image&amp;quot;,&amp;quot;video&amp;quot;)) %&amp;gt;%
  select(thread, msg_id = id, type, url) %&amp;gt;%
  mutate(type = ifelse(type == &amp;quot;linked_image&amp;quot;, &amp;quot;gif&amp;quot;, type)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msg_media %&amp;gt;%
  head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:print-msg-media-table&#34;&gt;Table 3.3: &lt;/span&gt;Sample rows from the message media table which contains links to images, videos, and gifs&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;thread&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;msg_id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;url&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151690057742991174&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://i.groupme.com/1334x1000.jpeg.15939bc2e6e049d18ff36e963930277a&#34; class=&#34;uri&#34;&gt;https://i.groupme.com/1334x1000.jpeg.15939bc2e6e049d18ff36e963930277a&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151676379943246890&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://i.groupme.com/1125x1500.jpeg.411991ef873f4124b53a39e4e641f00b&#34; class=&#34;uri&#34;&gt;https://i.groupme.com/1125x1500.jpeg.411991ef873f4124b53a39e4e641f00b&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151676379574536890&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://i.groupme.com/1125x1500.jpeg.755e1499b23e45ccbde3e25bf36bdc4c&#34; class=&#34;uri&#34;&gt;https://i.groupme.com/1125x1500.jpeg.755e1499b23e45ccbde3e25bf36bdc4c&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151675731689691903&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://i.groupme.com/759x1012.png.6fa08f0f26404b118d9a566ecdb45f92&#34; class=&#34;uri&#34;&gt;https://i.groupme.com/759x1012.png.6fa08f0f26404b118d9a566ecdb45f92&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151668678578436773&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://i.groupme.com/1103x1500.jpeg.77a1c39df8ad433485ee3770e85ab12d&#34; class=&#34;uri&#34;&gt;https://i.groupme.com/1103x1500.jpeg.77a1c39df8ad433485ee3770e85ab12d&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151668592092540099&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://i.groupme.com/893x1454.jpeg.b6e2182d1a9a4694b4ac044ce39607cf&#34; class=&#34;uri&#34;&gt;https://i.groupme.com/893x1454.jpeg.b6e2182d1a9a4694b4ac044ce39607cf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151668573130740629&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://i.groupme.com/1053x1500.jpeg.666f79152491490d8530ceb2b77d135a&#34; class=&#34;uri&#34;&gt;https://i.groupme.com/1053x1500.jpeg.666f79152491490d8530ceb2b77d135a&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151659192262290622&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://i.groupme.com/1125x1500.jpeg.dd015489bb1d47c6810ef9bf7b939a2b&#34; class=&#34;uri&#34;&gt;https://i.groupme.com/1125x1500.jpeg.dd015489bb1d47c6810ef9bf7b939a2b&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151659158488915002&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://i.groupme.com/670x594.jpeg.f583aee372f24d14aa9e56622ac8e3a8&#34; class=&#34;uri&#34;&gt;https://i.groupme.com/670x594.jpeg.f583aee372f24d14aa9e56622ac8e3a8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151649038251759445&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://i.groupme.com/1688x2250.jpeg.bd11ad29ddb847599a5ff5197068355c&#34; class=&#34;uri&#34;&gt;https://i.groupme.com/1688x2250.jpeg.bd11ad29ddb847599a5ff5197068355c&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;message-mentions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.5&lt;/span&gt; Message Mentions&lt;/h2&gt;
&lt;p&gt;Within each mesage, a user can mention someone else (@’ing another user, which sends them an alert) so we separate this into another table. Each record represents a message and the user mentioned. So, there will be multiple &lt;code&gt;message_id&lt;/code&gt;s with different &lt;code&gt;user_id&lt;/code&gt;s mentioned.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msg_mentions &amp;lt;-
  all_messages %&amp;gt;%
  filter(system == FALSE &amp;amp; is.na(event.type)) %&amp;gt;%
  rowwise() %&amp;gt;%
  filter(class(attachments) != &amp;quot;list&amp;quot;) %&amp;gt;%
  ungroup() %&amp;gt;%
  select(thread, id, attachments) %&amp;gt;%
  unnest() %&amp;gt;%
  filter(type %in% c(&amp;quot;mentions&amp;quot;)) %&amp;gt;%
  select(thread, msg_id = id, user_id = user_ids) %&amp;gt;% 
  unnest()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msg_mentions %&amp;gt;%
  head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:print-msg-mentions-table&#34;&gt;Table 3.4: &lt;/span&gt;Sample rows from the message media table contains links to images, videos, and gifs&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;thread&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;msg_id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;user_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693691456624897&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5264490&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693691456624897&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;40277126&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693691456624897&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;24072692&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693403929874645&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4930762&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693403929874645&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6127309&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693403929874645&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;24072692&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151693403929874645&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4814978&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151690674207602856&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4135589&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151690674207602856&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;19643548&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;151676455001749334&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;20712535&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;messages-with-meta-info&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.6&lt;/span&gt; Messages with Meta-Info&lt;/h2&gt;
&lt;p&gt;Finally, we will add a few derived columns to the cleaned messages data.frame such as&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;likes&lt;/code&gt; - count of likes received for a message&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contains_media&lt;/code&gt; - boolean of whether message contained an image, video, or gif&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num_mentions&lt;/code&gt; - count of the users mentioned in post (0, 1, 2, …)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msgs &amp;lt;- 
  msgs_cleaned %&amp;gt;%
  left_join(
    msg_likes %&amp;gt;%
      count(msg_id) %&amp;gt;%
      rename(likes = n)
    , by = &amp;#39;msg_id&amp;#39;
  ) %&amp;gt;%
  left_join(
    msg_media %&amp;gt;%
      select(msg_id) %&amp;gt;%
      mutate(contains_media = TRUE)
    , by = &amp;#39;msg_id&amp;#39;
  ) %&amp;gt;%
  left_join(
    msg_mentions %&amp;gt;%
      count(msg_id) %&amp;gt;%
      rename(num_mentions = n)
    , by = &amp;#39;msg_id&amp;#39;
  ) %&amp;gt;%
  replace_na(list(likes = 0, contains_media = FALSE, num_mentions = 0)) %&amp;gt;%
  select(thread, msg_id, created_at, user_id, username = name, likes, 
         contains_media, num_mentions, msg_text = text) %&amp;gt;%
  sample_frac() # randomizes rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-into-aws-redshift&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Loading into AWS Redshift&lt;/h1&gt;
&lt;p&gt;With a set of cleaned data.frames, we will load them into an AWS Redshift database as tables. Our final database structure looks like:&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:img-erd&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;../img/posts/groupme_data_etl/groupme_erd.png&#34; alt=&#34;GroupMe database ERD (Entity Relationship Diagram)&#34; width=&#34;75%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 4.1: GroupMe database ERD (Entity Relationship Diagram)
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;First, we create a connection to the Redshift cluster I set up. The database name, user, and password are all securely saved as enviornment variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;con &amp;lt;- DBI::dbConnect(
            drv = RPostgreSQL::PostgreSQL()
          , dbname = Sys.getenv(&amp;quot;redshift_db_name&amp;quot;)
          , host = paste0(&amp;quot;groupme-stats.&amp;quot;, Sys.getenv(&amp;quot;redshift_host&amp;quot;), 
                          &amp;quot;.us-east-1.redshift.amazonaws.com&amp;quot;)
          , user = Sys.getenv(&amp;quot;redshift_user&amp;quot;)
          , password = Sys.getenv(&amp;quot;redshift_pwd&amp;quot;)
          , port = &amp;quot;5439&amp;quot;
        )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we create two functions:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;redshift_datatypes&lt;/code&gt; - returns a character string of the Redshift column type for a given data.frame column&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upload_to_redshift&lt;/code&gt; - loads a tibble into Redshift&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;redshift_datatypes &amp;lt;- function(column) {
  class &amp;lt;- class(column)[1]
  case_when(
      class == &amp;#39;factor&amp;#39; ~ &amp;#39;VARCHAR(256)&amp;#39;
    , class == &amp;#39;character&amp;#39; &amp;amp;&amp;amp; max(nchar(column), na.rm = TRUE) &amp;lt;= 256  ~ &amp;#39;VARCHAR(256)&amp;#39;
    , class == &amp;#39;character&amp;#39; ~ &amp;#39;VARCHAR(65535)&amp;#39;
    , class == &amp;#39;logical&amp;#39; ~ &amp;#39;boolean&amp;#39;
    , class == &amp;#39;numeric&amp;#39; ~ &amp;#39;float&amp;#39;
    , class == &amp;#39;integer&amp;#39; ~ &amp;#39;int&amp;#39;
    , TRUE ~ &amp;#39;timestamp&amp;#39;
  )
}

upload_to_redshift &amp;lt;- function(con, df, tbl_name) {
 
  dplyr::copy_to(con
               , df = df
               , name = tbl_name 
               , overwrite = TRUE
               , temporary = FALSE
               , types = map_chr(df, redshift_datatypes)
               ) 
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We create a list of the R data.frames to move and then apply the functions above to perform the transfer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;groupme_tbls &amp;lt;- 
  list(users = users
     , msgs = msgs
     , msg_likes = msg_likes %&amp;gt;% mutate(like_id = row_number())
     , msg_media = msg_media %&amp;gt;% mutate(media_id = row_number())
     , msg_mentions = msg_mentions %&amp;gt;% mutate(mention_id = row_number())
  ) 

walk2(groupme_tbls, names(groupme_tbls), upload_to_redshift, con = con)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use the same connection to query the Redshift database. The query below returns all my messages to the Wharton 2018 GroupMe thread.&lt;/p&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;SELECT      CONVERT_TIMEZONE(&amp;#39;America/New_York&amp;#39;, created_at) AS created_at
          , contains_media
          , msg_text
FROM      public.msgs 
WHERE     username = &amp;#39;Jordan Farrer&amp;#39;
ORDER BY  created_at&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;knitsql-table&#34;&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:unnamed-chunk-3&#34;&gt;Table 4.1: &lt;/span&gt;3 records&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;created_at&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;contains_media&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;msg_text&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2017-06-14 00:50:53&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Assumed there’d be a filter &lt;span class=&#34;citation&#34;&gt;@Shilpa&lt;/span&gt; Kumar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2017-11-02 23:16:32&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Not the arbiter &lt;span class=&#34;citation&#34;&gt;@Shu&lt;/span&gt; Haur&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2017-11-02 23:58:25&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TRUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sync Canvas Files</title>
      <link>/post/sync-canvas-files/</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/sync-canvas-files/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tldr&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; tl;dr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#background&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#guide&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;style&gt;
  img { 
     border:1px solid #021a40;
  }
&lt;/style&gt;
&lt;div id=&#34;tldr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; tl;dr&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Frustrating to regularly download files from Canvas (learning management system used at Wharton) each time a professor adds/modifies a file&lt;/li&gt;
&lt;li&gt;This guide outlines a quick solution for syncing Canvas files for a set of classes using only R&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;background&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Background&lt;/h1&gt;
&lt;p&gt;When I first started at Wharton, I modified this &lt;a href=&#34;https://github.com/dharadesair/CanvasSync/blob/master/CanvasSync.py&#34;&gt;python script&lt;/a&gt; and set it up to download Canvas files every 30 minutes on an EC2 instance. I then used &lt;a href=&#34;https://www.dropbox.com/help/desktop-web/linux-commands&#34;&gt;headless Dropbox&lt;/a&gt; to sync to my local machine. It was quite a nice solution because it did not depend on my location machine and I would get a desktop notification from Dropbox every time a new file was added to Canvas.&lt;/p&gt;
&lt;p&gt;However, the structure of this script was for all files for all classes. I do not need all the files from previous classes and would prefer selective syncing. I started to modify the python script and then just decided to see if I could rewrite this in R. In addition to selective syncing, I added a check to see if the file size had changed. If so, the script re-downloads the file. This occurs when a professor updates a syllabus or homework assignment without changing the filename. A limitation of this script is that it does not delete files that the professor has removed from Canvas. I’m not too concerned with this limitation - this script was something I built in a morning before class and it was not meant to me a perfect product.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;guide&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Guide&lt;/h1&gt;
&lt;div id=&#34;download-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Download Files&lt;/h2&gt;
&lt;p&gt;First you need to download the files from &lt;a href=&#34;https://github.com/jrfarrer/sync_canvas&#34;&gt;github&lt;/a&gt;. You can download the github repo either by cloning it&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git clone https://github.com/jrfarrer/sync_canvas.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or by downloading the zip file from the repo.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/posts/sync_canvas/github.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Once you have downloaded this folder either by cloning the repo or downloading the zip, open &lt;code&gt;sync_canvas.Rproj&lt;/code&gt; to open the RStudio project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/posts/sync_canvas/rproj.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;canvas-access-token&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; Canvas Access Token&lt;/h2&gt;
&lt;p&gt;We need to create an API key (or access token) so that we can access Canvas outside of the browser. We will be using the Files API (&lt;a href=&#34;https://canvas.instructure.com/doc/api/files&#34;&gt;full documentation&lt;/a&gt;).&lt;/p&gt;
&lt;div id=&#34;creating-the-token-on-canvas&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.1&lt;/span&gt; Creating the token on Canvas&lt;/h3&gt;
&lt;p&gt;On &lt;a href=&#34;https://canvas.upenn.edu/&#34;&gt;Canvas&lt;/a&gt;, click &lt;strong&gt;Account&lt;/strong&gt; on the left-panel and then &lt;strong&gt;Setting&lt;/strong&gt;. Scroll down and under Approved Integrations, click &lt;strong&gt;+ New Access Token&lt;/strong&gt;. In the dialog, give a purpose such as “sync_canvas” and leave the date empty. Then click &lt;strong&gt;Generate Token&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/posts/sync_canvas/new_access_token.png&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The token is the long string of characters. &lt;strong&gt;DO NOT SHARE&lt;/strong&gt; this token as it provides access to your Canvas account. Copy it to the clipboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/posts/sync_canvas/access_token_details.png&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-token-to-.renviron-file&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.2&lt;/span&gt; Adding Token to .Renviron file&lt;/h3&gt;
&lt;p&gt;Following good practice of securely storing API keys, we will put it in a &lt;code&gt;.Renviron&lt;/code&gt; file that is loaded whenever the R sessions starts. To create the file and open it, run the following code&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; in the R console.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;user_renviron = path.expand(file.path(&amp;quot;~&amp;quot;, &amp;quot;.Renviron&amp;quot;))
if(!file.exists(user_renviron)) # check to see if the file already exists
  file.create(user_renviron)
file.edit(user_renviron)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will open &lt;code&gt;.Renviron&lt;/code&gt; in RStudio. Add the following line and save.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CANVAS_TOKEN = &amp;quot;YOUR API KEY&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/posts/sync_canvas/renviron.png&#34; width=&#34;75%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To test whether this worked, restart R by going to &lt;strong&gt;Session&lt;/strong&gt; &amp;gt; &lt;strong&gt;Restart R&lt;/strong&gt; in the RStudio menu. Then run the following in the R console.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Sys.getenv(&amp;quot;CANVAS_TOKEN&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should return your API key - it is now an environmental variable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;modify-course-list&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3&lt;/span&gt; Modify Course List&lt;/h2&gt;
&lt;p&gt;The R script only syncs data for courses listed in the file &lt;code&gt;course_list.csv&lt;/code&gt;. It should already be open when you opened &lt;code&gt;sync_canvas.Rproj&lt;/code&gt;. My spring 2018 schedule is listed, you need to change this for your schedule.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/posts/sync_canvas/course_list.png&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The first column of the csv will become the name of the course directory. The second column is ID of the class. To find the class ID, in Canvas go to the course page and the end of the URL will have a 7-digit ID. Just copy each one into this csv.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/posts/sync_canvas/course_id.png&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;set-local-directory&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.4&lt;/span&gt; Set Local Directory&lt;/h2&gt;
&lt;p&gt;At the top of the &lt;code&gt;sync_canvas.R&lt;/code&gt; file there is one directory that you need to change. To find a folder easily in Finder, &lt;strong&gt;right-click&lt;/strong&gt; on the folder and press &lt;strong&gt;Option&lt;/strong&gt; on the keyboard. This copies the entire path to the clipboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/posts/sync_canvas/pathname.gif&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The one path is &lt;strong&gt;file_dir&lt;/strong&gt; - location where you want to have the Canvas course files saved. For me, this is a folder in my Dropbox directory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/posts/sync_canvas/one_path.png&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;initial-file-download&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.5&lt;/span&gt; Initial file download&lt;/h2&gt;
&lt;p&gt;You need to ensure you have the tidyverse, jsonlite, and here packages installed. You should run this code in the R console check to ensure they are up-to-date.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(c(&amp;#39;tidyverse&amp;#39;, &amp;#39;jsonlite&amp;#39;, &amp;#39;here&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are all set to do an initial download. This will take a while, depending on how many classes you listed in the csv and the quantity/size of files uploaded by instructors. With &lt;code&gt;sync_canvas.R&lt;/code&gt; open, click &lt;strong&gt;Source&lt;/strong&gt;. It will take a while to run. You should be able to see the files populating in &lt;code&gt;file_dir&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/posts/sync_canvas/initial_run.png&#34; width=&#34;50%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;automate-syncing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.6&lt;/span&gt; Automate Syncing&lt;/h2&gt;
&lt;p&gt;There are many better ways to setup automation of the file downloading process (e.g. &lt;a href=&#34;http://www.launchd.info/&#34;&gt;launchd&lt;/a&gt; or &lt;a href=&#34;nerds.airbnb.com/airflow/&#34;&gt;airflow&lt;/a&gt;), but I wanted it to be quick and easy to setup. Cron is an older job scheduling utility that I’m very familiar with and is simple to setup and test. For this guide, we are using the R package &lt;code&gt;cronR&lt;/code&gt; so that we do not leave RStudio, but all the package does is set up a cron job.&lt;/p&gt;
&lt;div id=&#34;install-cronr&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.6.1&lt;/span&gt; Install cronR&lt;/h3&gt;
&lt;p&gt;We first need to install &lt;a href=&#34;https://cran.r-project.org/web/packages/cronR/index.html&#34;&gt;cronR&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;#39;cronR&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-cron-job&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.6.2&lt;/span&gt; Create cron job&lt;/h3&gt;
&lt;p&gt;Run the following code chunk in the R console.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(cronR)
sync_canvas_file &amp;lt;- file.path(here::here(), &amp;quot;sync_canvas.R&amp;quot;)
cmd &amp;lt;- paste(file.path(Sys.getenv(&amp;quot;R_HOME&amp;quot;), &amp;quot;bin&amp;quot;, &amp;quot;Rscript&amp;quot;), sync_canvas_file)
cron_add(cmd, frequency = &amp;#39;hourly&amp;#39;, id = &amp;#39;sync_canvas&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/posts/sync_canvas/cron.png&#34; width=&#34;75%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You now have the syncing process scheduled to run every hour on the hour (that your computer is turned on).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;logging&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.6.3&lt;/span&gt; Logging&lt;/h3&gt;
&lt;p&gt;While cron can help with logging, I wanted a bit more control and handled logging within &lt;code&gt;canvas_sync.R&lt;/code&gt;. After each run (on the hour), a log &lt;code&gt;sync_canvas_log.csv&lt;/code&gt; will be updated in the project folder. The most recent files will appear at the top. Even if no files were downloaded, a row will be added indicating the process ran. I find it easy to use &lt;a href=&#34;https://support.apple.com/kb/PH25575&#34;&gt;Quick Look&lt;/a&gt; (in Finder select &lt;code&gt;sync_canvas_log.csv&lt;/code&gt; and hit the spacebar) to easily check on the process and what files have been added and I will never actually open the file. The run times are in UTC.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/posts/sync_canvas/logging.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You are now all setup - close RStudio and stop downloading files from Canvas! I have Canvas email notifications setup when a professor uploads a file. Now I do not need to go and download it!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Source: &lt;a href=&#34;https://csgillespie.github.io/efficientR/r-startup.html#the-location-of-startup-files&#34;&gt;Efficient R programming&lt;/a&gt;&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to Build a Mobile Shiny App in an Hour</title>
      <link>/post/how-to-build-a-mobile-shiny-app-in-an-hour/</link>
      <pubDate>Fri, 30 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/how-to-build-a-mobile-shiny-app-in-an-hour/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tldr&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; tl;dr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup-shinyapps.io&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Setup Shinyapps.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#mysql-db-to-store-data&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; MySQL DB to Store Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-app&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Create App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploy&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; Deploy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;tldr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; tl;dr&lt;/h1&gt;
&lt;p&gt;Spin up a mobile-friendly Shiny app that stores data in an hour.&lt;/p&gt;
&lt;iframe style=&#34;border:1px solid #000000;display: block;margin-left: auto;margin-right: auto;&#34; width=&#34;450px&#34; height=&#34;630px&#34; align=&#34;center&#34; src=&#34;https://jordanfarrer.shinyapps.io/fake_news&#34; frameborder=&#34;1&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p style=&#34;text-align:center;&#34;&gt;
&lt;a href = &#34;https://jordanfarrer.shinyapps.io/fake_news&#34; target=&#34;_blank&#34;&gt;Direct Link&lt;/a&gt; || &lt;a href = &#34;https://github.com/jrfarrer/fake_news_app&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[This project was inspired by a section of &lt;a href=&#34;http://yihui.name/&#34;&gt;Yihui Xie’s&lt;/a&gt; &lt;a href=&#34;https://bookdown.org/yihui/bookdown/web-pages-and-shiny-apps.html&#34;&gt;bookdown&lt;/a&gt; that demonstrates how to embed Shiny Apps. His example uses &lt;a href=&#34;https://github.com/jcheng5&#34;&gt;Joe Cheng’s&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/web/packages/miniUI/index.html&#34;&gt;miniUI package&lt;/a&gt;.]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sitting in the library for one of the first times during business school with the intention of studying for an economics final, I instead decided that building a shiny app was a better use of a Monday night. In this post, we will walk through the steps necessarily to get a mobile-optimized Shiny app running. Time estimate is approximately an hour. This quick project is a testament to how RStudio’s tools make creating custom web apps.&lt;/p&gt;
&lt;p&gt;I was working with a dataset from Buzzfeed on American’s ability to distinguish accurate and inaccurate news in the wake of the 2016 presidential election. This app was a means to show others just how difficult identifying fake news can be.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;setup-shinyapps.io&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Setup Shinyapps.io&lt;/h1&gt;
&lt;p&gt;Setting up shinyapps.io to host the app is the easiest part of the process.&lt;/p&gt;
&lt;div id=&#34;setup-an-account-on-shinyapps.io&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; Setup an account on &lt;a href=&#34;shinyapps.io&#34; class=&#34;uri&#34;&gt;shinyapps.io&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/01.png&#34; width=&#34;65%&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;setup-rconnect-in-your-r-environment.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; Setup &lt;code&gt;rconnect&lt;/code&gt; in your R environment.&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;#39;rconnect&amp;#39;)
library(&amp;#39;rconnect&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On &lt;a href=&#34;shinyapps.io&#34; class=&#34;uri&#34;&gt;shinyapps.io&lt;/a&gt;, go to &lt;strong&gt;Account&lt;/strong&gt; → &lt;strong&gt;Tokens&lt;/strong&gt; then &lt;strong&gt;+ Add Token&lt;/strong&gt;. Then click &lt;strong&gt;Show&lt;/strong&gt; and copy this statement run in R.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/02.png&#34; width=&#34;65%&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;mysql-db-to-store-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; MySQL DB to Store Data&lt;/h1&gt;
&lt;p&gt;The hardest part of this process is creating a place for persistent storage. This &lt;a href=&#34;https://shiny.rstudio.com/articles/persistent-data-storage.html&#34;&gt;summary of options&lt;/a&gt; by Dean Attali was extremely helpful in getting me started. Unfortunately I was unable to use the new &lt;a href=&#34;https://jrfarrer.github.io/r/2016/12/29/RStudio-Lightsail.html&#34;&gt;Amazon Lightsail&lt;/a&gt; VPS because only SSH connections are allowed, which would not be possible from the shinyapps.io server without its own key and port-forwarding.&lt;/p&gt;
&lt;div id=&#34;spin-up-an-ec2-instance-if-you-do-not-already-have-one&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Spin up an EC2 instance, if you do not already have one&lt;/h2&gt;
&lt;p&gt;From the &lt;a href=&#34;console.aws.amazon.com/ec2&#34;&gt;EC2 Dashboard&lt;/a&gt;, click &lt;strong&gt;Launch Instance&lt;/strong&gt;, select &lt;strong&gt;Ubuntu&lt;/strong&gt;, and use the &lt;strong&gt;t2.micro&lt;/strong&gt; which is part of the free tier.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/03.png&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/04.png&#34; width=&#34;65%&#34;&gt;&lt;/p&gt;
&lt;p&gt;On the tab &lt;strong&gt;6. Configure Security Group&lt;/strong&gt;, add a new rule for &lt;strong&gt;MYSQL/Aurora&lt;/strong&gt;, which will add port 3306. Then copy &lt;code&gt;0.0.0.0/0&lt;/code&gt; into the &lt;strong&gt;Source&lt;/strong&gt; section.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/05.png&#34; width=&#34;60%&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then go to &lt;strong&gt;Review and Launch&lt;/strong&gt; to finish the process. You will need to select a new or existing SSH key pair. To learn more about SSH key pairs, see this &lt;a href=&#34;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html&#34;&gt;AWS article&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ssh-into-the-ec2-instance&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; SSH into the EC2 instance&lt;/h2&gt;
&lt;p&gt;Once the instance is running with the bright green ball next to it, copy the &lt;strong&gt;Public DNS&lt;/strong&gt; and SSH into the machine.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/06.png&#34; width=&#34;65%&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;ssh -i macbookair.pem ubuntu@ec2-XXXXXXXXX.compute-1.amazonaws.com&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;install-mysql-server&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3&lt;/span&gt; Install MySQL Server&lt;/h2&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install mysql-server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the second command you’ll need to click &lt;strong&gt;Y&lt;/strong&gt; and type in a password for the root user of MYSQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;configure-the-mysql-installation-by-running&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.4&lt;/span&gt; Configure the MySQL installation by running&lt;/h2&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo mysql_secure_installation&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After typing the root password, say no by clicking any key and then &lt;strong&gt;Y&lt;/strong&gt; to the remaining questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;test-the-server-is-running-with-the-command&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.5&lt;/span&gt; Test the server is running with the command&lt;/h2&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;service mysql status&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see something like this&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/14.png&#34; width=&#34;65%&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;access-mysql-via-the-shell&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.6&lt;/span&gt; Access MySQL via the shell&lt;/h2&gt;
&lt;p&gt;Run the following command and enter the password for the root MySQL user.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;mysql -u root -p&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;run-show-databases-to-see-the-default-databases&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.7&lt;/span&gt; Run &lt;code&gt;SHOW DATABASES;&lt;/code&gt; to see the default databases:&lt;/h2&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;SHOW DATABASES;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/07.png&#34; width=&#34;20%&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-database-for-our-app-called-fake_news&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.8&lt;/span&gt; Create a database for our app called &lt;strong&gt;fake_news&lt;/strong&gt;&lt;/h2&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;CREATE DATABASE fake_news;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once it’s created, switch to the new database with&lt;/p&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;USE fake_news;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-one-simple-table-with-the-command&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.9&lt;/span&gt; Create one simple table with the command:&lt;/h2&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;CREATE TABLE responses (
    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, 
    email VARCHAR(254),
    domain VARCHAR(64),
    q_id INT, 
    response BOOLEAN
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a test, insert two records:&lt;/p&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;INSERT INTO responses (email, domain, q_id, response) 
VALUES (&amp;quot;test&amp;quot;,&amp;quot;gmail.com&amp;quot;, 2, TRUE), 
        (&amp;quot;test2&amp;quot;,&amp;quot;gmail.com&amp;quot;, 1, FALSE);
SELECT * FROM responses;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/08.png&#34; width=&#34;35%&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then delete them:&lt;/p&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;DELETE FROM responses;
SELECT * FROM responses;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/09.png&#34; width=&#34;35%&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-an-account-access-for-a-user-for-the-app&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.10&lt;/span&gt; Create an account Access for a user for the app&lt;/h2&gt;
&lt;p&gt;Here we will create a user that has &lt;em&gt;complete access&lt;/em&gt; to the database. This tutorial is an example and obviously in a production environment you would do this differently.&lt;/p&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;CREATE USER &amp;#39;new_username&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;new_password&amp;#39;;
CREATE USER &amp;#39;new_username&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;new_password&amp;#39;;

GRANT ALL ON *.* TO &amp;#39;new_username&amp;#39;@&amp;#39;localhost&amp;#39;;
GRANT ALL ON *.* TO &amp;#39;new_username&amp;#39;@&amp;#39;%&amp;#39;;

GRANT ALL PRIVILEGES ON *.* TO &amp;#39;new_username&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;new_password&amp;#39; WITH GRANT OPTION;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are curious about the password requirements, check your environment variables that were set during configuration:&lt;/p&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;SHOW VARIABLES LIKE &amp;#39;validate_password%&amp;#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/10.png&#34; width=&#34;40%&#34;&gt;&lt;/p&gt;
&lt;p&gt;You also need to edit the &lt;code&gt;my.cnf&lt;/code&gt; file to enable remote access. First quit MySQL with the &lt;code&gt;exit&lt;/code&gt; command. Run the following command that opens &lt;code&gt;my.cnf&lt;/code&gt; in the text editor vim.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo vim /etc/mysql/my.cnf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hit &lt;code&gt;a&lt;/code&gt; on the keyboard to enter insert mode, scroll down to right below the comment and paste the following in.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;[mysqld]
#
# * Basic Settings
#
user            = mysql
pid-file        = /var/run/mysqld/mysqld.pid
socket          = /var/run/mysqld/mysqld.sock
port            = 3306
basedir         = /usr
datadir         = /var/lib/mysql
tmpdir          = /tmp
lc-messages-dir = /usr/share/mysql
skip-external-locking
#
# Instead of skip-networking the default is now to listen only on
# localhost which is more compatible and is not less secure.
bind-address            = 0.0.0.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/11.png&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then tap &lt;code&gt;esc&lt;/code&gt; then &lt;code&gt;:&lt;/code&gt;, and type &lt;code&gt;wq!&lt;/code&gt; and hit &lt;code&gt;enter&lt;/code&gt; so save and exit. Then run the following command to restart MySQL.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo /etc/init.d/mysql restart&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The hard stuff is over!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;create-app&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Create App&lt;/h1&gt;
&lt;p&gt;This part is relatively easy as we are making a simple Shiny app using the miniUI. In this app we have 3 tabs:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Tab 1: Users select whether they believe the news headline is Real / Fake and submit an email address&lt;/li&gt;
&lt;li&gt;Tab 2: Users view their results and see mistakes highlighted in red and the percent of others who have gotten that headline correct&lt;/li&gt;
&lt;li&gt;Tab 3: Users shown a “leaderboard” of correct responses based on domain. My idea was that this could be a competition among business schools.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To get this app running for yourself, clone the repo &lt;a href=&#34;https://github.com/jrfarrer/fake_news_app&#34; class=&#34;uri&#34;&gt;https://github.com/jrfarrer/fake_news_app&lt;/a&gt; and then modify the credentials in &lt;code&gt;credentials.R&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;host &amp;lt;- &amp;quot;ec2-XXXXXXXXXXXX.compute-1.amazonaws.com&amp;quot;
user &amp;lt;- &amp;quot;fake_news&amp;quot;
password &amp;lt;- &amp;quot;XXXXXXXXXXXXXXX&amp;quot;
mailbox_layer &amp;lt;- &amp;quot;XXXXXXXXXXXXXXX&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll recognize the first 3 credentials in the image above as related to the MySQL serve we setup. The last credential relates to &lt;a href=&#34;https://mailboxlayer.com/&#34;&gt;mailboxlayer API&lt;/a&gt;, which is an email verification service. I use this to check whether the email address is a real email address. It is easy to signup for free and get an API key that you can paste in. With each call to the mailboxlayer API, you receive a score on the likelihood the provided address is legitimate. In the &lt;code&gt;app.R&lt;/code&gt; I set a threshold of 0.65 and also use the domain returned to check that it is a &lt;code&gt;.edu&lt;/code&gt; address to better support the leaderboard objective.&lt;/p&gt;
&lt;div id=&#34;shiny-app-explained&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1&lt;/span&gt; Shiny App Explained&lt;/h2&gt;
&lt;div id=&#34;articles&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1.1&lt;/span&gt; Articles&lt;/h3&gt;
&lt;p&gt;The news headlines come from a pipe-delimited text file that I put together from information in this &lt;a href=&#34;https://github.com/BuzzFeedNews/2016-12-fake-news-survey&#34;&gt;Buzzfeed repo&lt;/a&gt;.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/jrfarrer/e92e700a3495506f279f3c4c7fbacbf0.js&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;bootstrap-toggles&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1.2&lt;/span&gt; Bootstrap Toggles&lt;/h3&gt;
&lt;p&gt;One of the things shiny users might have noticed immediately is the &lt;a href=&#34;http://shiny.rstudio.com/gallery/widget-gallery.html&#34;&gt;non-shiny widgets&lt;/a&gt;. &lt;a href=&#34;http://www.bootstraptoggle.com/&#34;&gt;Bootstrap toogles&lt;/a&gt; seemed like the appropriate user interaction. I created these by creating checkboxes manually and then adding the stylesheet and javascript from Bootstrap.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;isolate({
  time_int &amp;lt;- round(as.numeric(Sys.time()) - as.numeric(as.POSIXct(Sys.Date())),0)
})

output$toggles &amp;lt;- renderUI({
  
  toggles &amp;lt;- paste0(&amp;#39;&amp;lt;div class=&amp;quot;checkbox&amp;quot;&amp;gt;
                      &amp;lt;label class=&amp;quot;clearfix&amp;quot;&amp;gt;
                        &amp;lt;input id=&amp;#39;, articles$id[randos[, time_int]],&amp;#39; checked type=&amp;quot;checkbox&amp;quot; data-toggle=&amp;quot;toggle&amp;quot; data-on=&amp;quot;Real&amp;quot; data-off=&amp;quot;Fake&amp;quot; data-size=&amp;quot;small&amp;quot;&amp;gt;&amp;#39;, articles$article[randos[, time_int]],&amp;#39; 
                      &amp;lt;/label&amp;gt;
                  &amp;lt;/div&amp;gt;&amp;#39;)
  
  HTML(paste0(&amp;#39;&amp;lt;head&amp;gt;
              &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css&amp;quot;&amp;gt;
              &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
          &amp;lt;/head&amp;gt;&amp;#39;, toggles)) 
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;randos&lt;/code&gt; objected is created by &lt;code&gt;randos &amp;lt;- replicate(3600*24, sample(1:11))&lt;/code&gt; and is a means to have the order of the articles be different for every session. I created a matrix of different orders for every second of the day (86,400) which is then indexed by &lt;code&gt;time_int&lt;/code&gt; inside the server component. The isolate ensures this order is static so that the order appears the same on both the Headline and Results tabs.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;datatables&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1.3&lt;/span&gt; Datatables&lt;/h3&gt;
&lt;p&gt;I have used the &lt;a href=&#34;https://rstudio.github.io/DT/&#34;&gt;DT package&lt;/a&gt; on almost all my shiny projects, including the buttons extensions and the column and row selections features. This project is an example of just how easy it is to build a great looking table with the DT package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cols &amp;lt;- ifelse(df2$`Actual` == df2$`You Selected`, NA,&amp;quot;#FCBBA1&amp;quot;)

DT::datatable(df2
              , rownames = FALSE
              , escape =  FALSE
              , options = list(
                dom = &amp;#39;t&amp;#39;
                , pageLength = 11
                , ordering = FALSE
                , columnDefs = list(list(className = &amp;#39;dt-center&amp;#39;, targets = 1:3))
              )
) %&amp;gt;% DT::formatStyle(columns = 1:4, valueColumns = 1, backgroundColor = styleEqual(df2$Article, cols)) %&amp;gt;%
  DT::formatPercentage(4)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;test-the-app&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2&lt;/span&gt; Test the App&lt;/h2&gt;
&lt;p&gt;To test the app, change the comment of the last two lines to&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#shinyApp(ui, server)
runGadget(shinyApp(ui, server), viewer = paneViewer())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;highlight all and run (do not click &lt;code&gt;Run App&lt;/code&gt;). The app should appear in the RStudio Viewer:&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/12.png&#34; width=&#34;30%&#34;&gt;&lt;/p&gt;
&lt;p&gt;If this works, you are ready to deploy (just remember to swap the line commenting above back to where it stood).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;deploy&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; Deploy&lt;/h1&gt;
&lt;p&gt;Luckily this part is quite straightforward.&lt;/p&gt;
&lt;p&gt;Run the deployApp command&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rsconnect::deployApp()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;custom&#34; src=&#34;../img/posts/fake_news_app/13.png&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;
&lt;p&gt;The first time this will take a while as all package dependencies are built. When you make a change, simply rerun the same command.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to Setup RStudio on Amazon Lightsail</title>
      <link>/post/how-to-setup-rstudio-on-amazon-lightsail/</link>
      <pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/how-to-setup-rstudio-on-amazon-lightsail/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tldr&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; tl;dr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup-lightsail-instance&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Setup Lightsail Instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#swap-space&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Swap Space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rocker&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Rocker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rocker-usage&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; Rocker Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#headless-dropbox&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;6&lt;/span&gt; Headless Dropbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;tldr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; tl;dr&lt;/h1&gt;
&lt;p&gt;Guide to perform analyses in the cloud with RStudio on Amazon Lightsail&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[This post is inspired by and extends upon a guide from &lt;a href=&#34;http://sas-and-r.blogspot.com/2016/12/rstudio-in-cloud-with-amazon-lightsail.html&#34;&gt;SAS and R&lt;/a&gt;]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this post we will use the new &lt;a href=&#34;https://lightsail.aws.amazon.com/&#34;&gt;Amazon Lightsail&lt;/a&gt; to create an always-on RStudio enviornment in the cloud. With an older Macbook Air, the migration from local to cloud data processing and analysis has allowed me to forget about resource constraints.&lt;/p&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_0.gif&#34; width=&#34;60%&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;setup-lightsail-instance&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Setup Lightsail Instance&lt;/h1&gt;
&lt;p&gt;Lightsail is Amazon’s virtual private server (VPS) offering that makes spinning up a workspace in the cloud a breeze. In contrast to EC2, there is little provisioning involved and the pricing model is “no-nonsense” (i.e. transparent). You will notice that the interface is much more user-friendly than the EC2 Dashboard.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Login into &lt;a href=&#34;https://lightsail.aws.amazon.com/&#34;&gt;Amazon Lightsail&lt;/a&gt; and create a new instance.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_1.png&#34; width=&#34;80%&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Select &lt;strong&gt;Base OS&lt;/strong&gt; and &lt;strong&gt;Ubuntu&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_2.png&#34; width=&#34;40%&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;I encourage you to use your own public key rather than a key from Amazon for ease of SSH’ing to your VPS. If you’re on OSX, your public key is likely in the following location:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you haven’t setup a SSH key yet, the &lt;a href=&#34;https://help.github.com/articles/generating-an-ssh-key/&#34;&gt;Github guide&lt;/a&gt; is a good place to go.&lt;/p&gt;
&lt;p&gt;For some reason, Amazon makes this difficult by using a regular file browser. You need to make hidden files viewable in Finder by running the two commands:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;defaults write com.apple.finder AppleShowAllFiles YES
killall Finder&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finder will automatically relaunch. Navigate to &lt;code&gt;~/.ssh&lt;/code&gt; and drag that folder into the &lt;strong&gt;Upload a key pair&lt;/strong&gt; file dialog.&lt;/p&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_3.gif&#34; width=&#34;60%&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once the key pair is uploaded, run the following commands to hide hidden files again in Finder.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;defaults write com.apple.finder AppleShowAllFiles N
killall Finder&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Select the $5/month plan (that comes with a month free), name your instance anything (I chose &lt;em&gt;RStudio&lt;/em&gt;), and click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_4.png&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;While you are waiting for the server to spin up, click the three dots in the upper-right corner of the server and select &lt;strong&gt;Manage&lt;/strong&gt;. On the &lt;strong&gt;Networking&lt;/strong&gt; tab, under the &lt;strong&gt;Firewall&lt;/strong&gt; table, click &lt;strong&gt;+ Add Another&lt;/strong&gt;. Leave &lt;em&gt;Custom&lt;/em&gt; and &lt;em&gt;TCP&lt;/em&gt;, but change the range to just &lt;strong&gt;8787&lt;/strong&gt;. This will be the port we connect to the RStudio UI.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_5.png&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;After the instance is &lt;strong&gt;Running&lt;/strong&gt;, SSH into the server using the public IP address in the corner (do not worry, the one below has been deleted).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_6.png&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;ssh ubuntu@54.209.145.59&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Say &lt;code&gt;yes&lt;/code&gt; to the recognition of your SSH key. You are now connected!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;swap-space&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Swap Space&lt;/h1&gt;
&lt;p&gt;The installation of some R packages can be very memory intensive (e.g. &lt;a href=&#34;https://cran.r-project.org/web/packages/tidytext/index.html&#34;&gt;tidytext&lt;/a&gt;) and the Lightsail VPS has only 512MB of memory. In order to make such installations possible, we need to use swap space. Swap space is a portion of virtual memory that is on the hard disk, used when RAM is full. Luckily the base tier has a 20GB SSD. These steps comes from a great tutorial by &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-configure-virtual-memory-swap-file-on-a-vps&#34;&gt;DigitialOcean&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the VPS, run the &lt;code&gt;free&lt;/code&gt; command to see that currently there is no swap memory.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;free -h&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_7.png&#34; width=&#34;45%&#34;&gt;&lt;/p&gt;
&lt;p&gt;Run the following commands to create a swap file called &lt;strong&gt;swap.img&lt;/strong&gt;, size it to be 2GB (2048k) and turn it on.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;cd /var
sudo touch swap.img
sudo chmod 600 swap.img
sudo dd if=/dev/zero of=/var/swap.img bs=2048k count=1000
sudo mkswap /var/swap.img
sudo swapon /var/swap.img&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run &lt;code&gt;free&lt;/code&gt; again to see the 2GB is now swap space.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;free -h&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_8.png&#34; width=&#34;45%&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rocker&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Rocker&lt;/h1&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Download &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; by running and clicking &lt;strong&gt;Y&lt;/strong&gt; to install.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo apt-get install docker.io&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Start the Docker service by running&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo service docker start&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Run the following command to start the &lt;a href=&#34;https://hub.docker.com/u/rocker/&#34;&gt;Rocker&lt;/a&gt; file&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo docker run -d -p 8787:8787 -e ROOT=TRUE rocker/hadleyverse&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first time, this will require a download and extraction of the file:&lt;/p&gt;
&lt;p&gt;In the run command above,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-d indicates the container starts in detached mode&lt;/li&gt;
&lt;li&gt;-p publishes a container᾿s port to a port on the host (allowing us to use 8787 to access RStudio in the browser)&lt;/li&gt;
&lt;li&gt;-e sets an environment variable, in our case enabling root access&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;In the browser, navigate to &lt;code&gt;&amp;lt;VPS IP address&amp;gt;:8787&lt;/code&gt;. Username = &lt;code&gt;rstudio&lt;/code&gt; and password = &lt;code&gt;rstudio&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_9.png&#34; width=&#34;40%&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;You’re using RStudio in the cloud!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_10.png&#34; width=&#34;60%&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rocker-usage&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; Rocker Usage&lt;/h1&gt;
&lt;div id=&#34;installing-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.1&lt;/span&gt; Installing Packages&lt;/h2&gt;
&lt;p&gt;You are going to want to customize your docker container for future R-ing. Let’s bookmark the webpage and get started. Install your favorite packages (some that use g++ will take a bit longer but will finish thanks to the swap memory). Change RStudio settings, such as font size and syntax highlighting.&lt;/p&gt;
&lt;p&gt;If there are external dependencies (i.e. for &lt;a href=&#34;https://cran.r-project.org/web/packages/rattle/index.html&#34;&gt;Rattle&lt;/a&gt;) you need to install them in the docker container. Let’s do this for Rattle:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;To view active containers, run&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo docker ps&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_11.png&#34; width=&#34;45%&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;To start bash shell for the container, run the following command replacing the &lt;code&gt;&amp;lt;container-id&amp;gt;&lt;/code&gt; with the string found above.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo docker exec -it &amp;lt;container-id&amp;gt; bash&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Install libgtk2.0-dev, by running typing &lt;strong&gt;Y&lt;/strong&gt; after the second command:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install wajig 
sudo wajig install libgtk2.0-dev&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;You are now set to install &lt;strong&gt;rattle&lt;/strong&gt; in R in RStudio&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;#39;rattle&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;saving-a-container&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.2&lt;/span&gt; Saving a Container&lt;/h2&gt;
&lt;p&gt;You do not need to close the Docker container, but it’s a good idea to save the container once you have it in a condition you like it.&lt;/p&gt;
&lt;p&gt;To the save your current container, find the container id and run the commit command:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo docker ps
sudo docker commit -m &amp;quot;tidyverse + my packages&amp;quot; &amp;lt;container id&amp;gt;  rstudio2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see all images&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo docker images&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_12.png&#34; width=&#34;45%&#34;&gt;&lt;/p&gt;
&lt;p&gt;You should see &lt;strong&gt;rocker/hadleyverse&lt;/strong&gt; and your new container. Now, kill your original container and start the new one. The command below actually kills all open containers.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo docker stop $(sudo docker ps -a -q)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then start your newly saved container:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo docker run -d -p 8787:8787 -e ROOT=TRUE rstudio2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;headless-dropbox&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;6&lt;/span&gt; Headless Dropbox&lt;/h1&gt;
&lt;p&gt;I found that this setup was not too useful unless I had data transferring to the Docker container running RStudio. A good solution here is Dropbox. All my work is stored in Dropbox and I have a Dropbox account that runs on an EC2 instance and automatically downloads university course files from &lt;a href=&#34;https://www.canvaslms.com/&#34;&gt;Canvas&lt;/a&gt;, the learning management system at my university. So, if my professor adds a new .R file or dataset, I immediately have access in RStudio on Lightsail.&lt;/p&gt;
&lt;div id=&#34;install-python2.7&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;6.1&lt;/span&gt; Install Python2.7&lt;/h2&gt;
&lt;p&gt;We need to install python2.7 because the &lt;a href=&#34;http://www.dropboxwiki.com/tips-and-tricks/using-the-official-dropbox-command-line-interface-cli&#34;&gt;python script&lt;/a&gt; that Dropbox created is for python2.7.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Install a bunch of dependencies:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install build-essential checkinstall
sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Download and extract python2.7&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;wget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz
tar -xvf Python-2.7.12.tgz
cd Python-2.7.12&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Perform the installation. For the last line &lt;code&gt;checkinstall&lt;/code&gt;, you’ll need to respond to a lot of questions and it will take a bit.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;./configure
make
sudo checkinstall&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Check that the default python version is now 2.7&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;python -V&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_13.png&#34; width=&#34;20%&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;install-dropbox&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;6.2&lt;/span&gt; Install Dropbox&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Download and start the daemon&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;cd ~ &amp;amp;&amp;amp; wget -O - &amp;quot;https://www.dropbox.com/download?plat=lnx.x86_64&amp;quot; | tar xzf -
~/.dropbox-dist/dropboxd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the last command you’ll see&lt;/p&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_14.png&#34; width=&#34;40%&#34;&gt;&lt;/p&gt;
&lt;p&gt;Take the URL and paste it into the browser to connect to your Dropbox account.&lt;/p&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_15.png&#34; width=&#34;50%&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Download Dropbox’s python script to control Dropbox:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;mkdir -p ~/bin
wget -O ~/bin/dropbox.py &amp;quot;https://www.dropbox.com/download?dl=packages/dropbox.py&amp;quot;
chmod +x ~/bin/dropbox.py
python2.7 ~/bin/dropbox.py start
python2.7 ~/bin/dropbox.py autostart y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll now see the Dropbox folder in your &lt;strong&gt;ubuntu&lt;/strong&gt; directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;run-docker-container-with-dropbox&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;6.3&lt;/span&gt; Run Docker Container with Dropbox&lt;/h2&gt;
&lt;p&gt;Now with Dropbox set up, you can use the -v switch to attach the Dropbox folder (i.e. volume) to your Docker container.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo docker run -d -e ROOT=TRUE -v /home/ubuntu/Dropbox:/home/rstudio/Dropbox -p 8787:8787 rstudio2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you can see the Dropbox folder in the &lt;strong&gt;Files&lt;/strong&gt; pane.&lt;/p&gt;
&lt;p&gt;&lt;img class = &#34;custom&#34; src=&#34;../img/posts/lightsail/lightsail_16.png&#34; width=&#34;60%&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
